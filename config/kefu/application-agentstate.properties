server.port=8487
spring.aop.auto=true
spring.aop.proxy-target-class=true
server.session.timeout=18000
spring.velocity.check-template-location=false
spring.velocity.enabled=false
spring.resources.add-mappings=false
spring.mvc.favicon.enabled=false
spring.jmx.enabled=false
multipart.enabled=false
multipart.max-file-size=10MB
# management configuration
management.security.enabled=true
management.context-path=/management
endpoints.health.sensitive=false
endpoints.configs.sensitive=false
#security configuration
security.user.name=kefu-admin
security.user.password=593d9dc725c8caf8a21e6f12337d3271
security.user.role=ADMIN
security.basic.path=/management

# 本地开发环境不启用服务发现和注册
spring.cloud.discovery.enabled=false
# 本地开发环境不启用config server
spring.cloud.config.enabled=false

# ======================= database configuration ==================
# 数据库连接信息, 同一个部署应该都是一样的
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/weichat?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE&useSSL=false
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.max-active=5
spring.datasource.maximum-pool-size=10
spring.datasource.initial-size=1


# ======================= hibernate configuration ================
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.DefaultNamingStrategy
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
# cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.infinispan.use_synchronization=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.infinispan.InfinispanRegionFactory
spring.jpa.properties.hibernate.cache.infinispan.cfg=infinispan.xml

#
# ======================= ganglia report ==========================
# metrics report 到ganglia的地址和端口, 留空的话则不会report到ganglia
# 等于之前的  -Dreporter.ganglia.host=sdb-ali-hangzhou-log -Dreporter.ganglia.port=8684
reporter.ganglia.host=
# 注意, 这个属性需要或者不存在或者给一个数字的值, 不能留空
reporter.ganglia.port=8649
## ============================ kefu kafka (not the one used for connector)==============
kefu.kafka.producer.enabled=false
kefu.kafka.producer.properties.bootstrap.servers=127.0.0.1:9092
kefu.kafka.consumer.enabled=false
kefu.kafka.consumer.properties.zookeeper.connect=127.0.0.1:2181
kefu.kafka.consumer.properties.group.id=agent-connection-singal-consumers
kefu.kafka.consumer.properties.client.id=${kefu.kafka.consumer.properties.group.id}-client-${random.int}
kefu.kafka.consumer.properties.bootstrap.servers=${kefu.kafka.producer.properties.bootstrap.servers}
kefu.kafka.bridge=true
kefu.kafka.topic=events

spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379
spring.redis.timeout=2000
spring.redis.pool.max-idle=50
spring.redis.pool.min-idle=10
spring.redis.pool.max-active=100
spring.redis.pool.max-wait=-1
spring.redis.pool.max-total=100

consumer.agentstate.num=1
#ms
consumer.agentstate.expire=10000
consumer.agentstate.topic=kf:pool:agentstate
consumer.schedule.num=1
consumer.schedule.topic=kf:pool:schedule

kf.redis.pool.agentstatekeeper.host=127.0.0.1
kf.redis.pool.agentstatekeeper.port=6379
kf.redis.pool.agentstatekeeper.timeout=2000
kf.redis.pool.agentstatekeeper.max-idle=50
kf.redis.pool.agentstatekeeper.min-idle=10
kf.redis.pool.agentstatekeeper.max-wait=-1
kf.redis.pool.agentstatekeeper.max-total=500

kf.redis.pool.schedule.host=${spring.redis.host}
kf.redis.pool.schedule.port=${spring.redis.port}
kf.redis.pool.schedule.timeout=${spring.redis.timeout}
kf.redis.pool.schedule.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.schedule.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.schedule.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.schedule.max-total=${spring.redis.pool.max-total}


kefu.agentsession.enabled=false
kf.redis.pool.agentsession.host=${spring.redis.host}
kf.redis.pool.agentsession.port=6380
kf.redis.pool.agentsession.timeout=${spring.redis.timeout}
kf.redis.pool.agentsession.max-idle=${spring.redis.pool.max-idle}
kf.redis.pool.agentsession.min-idle=${spring.redis.pool.min-idle}
kf.redis.pool.agentsession.max-wait=${spring.redis.pool.max-wait}
kf.redis.pool.agentsession.max-total=${spring.redis.pool.max-total}


kefu.agentsession2.enabled=true
kf.redis.pool.agentsession2.host=${kf.redis.pool.agentsession.host}
kf.redis.pool.agentsession2.port=6381


kf.redis.pool.agentconntimer.host=${kf.redis.pool.agentsession2.host}
kf.redis.pool.agentconntimer.port=6382
kf.redis.pool.agentconntimer.timeout=${kf.redis.pool.agentsession.timeout}
kf.redis.pool.agentconntimer.max-idle=${kf.redis.pool.agentsession.max-idle}
kf.redis.pool.agentconntimer.min-idle=${kf.redis.pool.agentsession.min-idle}
kf.redis.pool.agentconntimer.max-wait=${kf.redis.pool.agentsession.max-wait}
kf.redis.pool.agentconntimer.max-total=${kf.redis.pool.agentsession.max-total}


#websocket的过期时间,超过一段时间没有心跳将会认为连接已经断开
kefu.agentconnection.expire.time.seconds=40
#双写时需要打开,防止重复处理websocket过期
kefu.agentconnection.expire.uselock=true
#调度会话时,会扫描若干个坐席以供调用,用这个值来限制扫描范围
kf.schedule.agent.scan.limit=10
#新的agentsession里面会有一个属性标明websocket是否存活,旧的agentsession里面没有,调度时需要check这个属性判断坐席还可以被调度
#等新版本全量之后需打开这个开关
kf.schedule.agent.checkconn=true
#双写期间,标明使用那个redis来读取agentsession,1标明使用agentsession;2标明使用agentsession2
kf.agentsession.readfrom=2

kf.pubsub.taskExecutor.corePoolSize=5
kf.pubsub.taskExecutor.maxPoolSize=10
kf.pubsub.taskExecutor.queueCapacity=25
